(deftheme github-dark)

(let ((class '((class color) (min-colors 89)))
      (fg1 "#aebbc8")
      (fg2 "#6cb6ff")
      (fg3 "#444c56")
      (fg4 "#444c56")
      (bg1 "#22272e")
      (bg2 "#22272e")
      (bg3 "#6cb6ff")
      (bg4 "yellow")
      (key2 "#aebbc8")
      (key3 "#519af4")
      (builtin "#6cb6ff")
      (keyword "#f47067")
      (const   "#6cb6ff")
      (comment "#768391")
      (func    "#dcbdfb")
      (str     "#96d0ff")
      (type    "#dcbdfb")
      (var     "#aebbc8")
      (warning "#f1e05a"))
  (custom-theme-set-faces
   'github-dark
   `(default
      ((,class (:background ,bg1 :foreground ,fg1))))
   `(font-lock-builtin-face
     ((,class (:foreground ,builtin))))
   `(font-lock-comment-face
     ((,class (:foreground ,comment))))
   `(font-lock-negation-char-face
     ((,class (:foreground ,const))))
   `(font-lock-reference-face
     ((,class (:foreground ,const))))
   `(font-lock-constant-face
     ((,class (:foreground ,const))))
   `(font-lock-doc-face
     ((,class (:foreground ,comment))))
   `(font-lock-function-name-face
     ((,class (:foreground ,func ))))
   `(font-lock-keyword-face
     ((,class (:foreground ,keyword))))
   `(font-lock-string-face
     ((,class (:foreground ,str))))
   `(font-lock-type-face
     ((,class (:foreground ,type ))))
   `(font-lock-variable-name-face
     ((,class (:foreground ,var))))
   `(font-lock-warning-face
     ((,class (:foreground ,warning :background ,bg2))))
   `(region
     ((,class (:background ,key3 :foreground ,bg1))))
   `(highlight
     ((,class (:foreground ,fg3 :background ,bg3))))
   `(hl-line
     ((,class (:background ,bg2))))
   `(fringe
     ((,class (:background ,bg2 :foreground ,fg4))))
   `(cursor
     ((,class (:background ,builtin))))
   `(show-paren-match-face
     ((,class (:background ,warning))))
   `(isearch
     ((,class (:foreground ,bg1 :background ,key3))))
   `(mode-line
     ((,class (:box (:line-width 1 :color ,builtin) :bold t :foreground ,builtin :background ,bg1))))
   `(mode-line-inactive ((,class (:box (:line-width 1 :color ,fg3) :foreground ,builtin :background ,bg1 :weight normal :bold t))))
   `(mode-line-buffer-id ((,class (:bold t :foreground ,keyword :background nil))))
   `(mode-line-highlight ((,class (:foreground ,keyword :box nil :weight bold))))
   `(mode-line-emphasis ((,class (:foreground ,fg1))))
   `(vertical-border ((,class (:foreground ,fg3))))
   `(minibuffer-prompt ((,class (:bold t :foreground ,keyword))))
   `(default-italic ((,class (:italic t))))
   `(link ((,class (:foreground ,const :underline t))))
   `(org-code ((,class (:foreground ,fg2))))
   `(org-hide ((,class (:foreground ,fg4))))
   `(org-level-1 ((,class (:foreground ,func))))
   ;;`(org-level-2 ((,class (:foreground ,fg2))))
   `(org-level-3 ((,class (:foreground ,fg2))))
   `(org-level-4 ((,class (:foreground ,fg2))))
   `(org-date ((,class (:underline t :foreground ,var) )))
   `(org-footnote  ((,class (:underline t :foreground ,fg4))))
   `(org-link ((,class (:underline t :foreground ,fg2))))
   `(org-special-keyword ((,class (:foreground ,func))))
   `(org-block ((,class (:foreground ,fg3))))
   `(org-quote ((,class (:inherit org-block :slant italic))))
   `(org-verse ((,class (:inherit org-block :slant italic))))
   `(org-todo ((,class (:foreground ,keyword))))
   `(org-done ((,class (:foreground ,builtin))))
   `(org-warning ((,class (:underline t :foreground ,builtin))))
   `(org-agenda-structure ((,class (:foreground ,fg3 :box (:color ,fg4) :background ,bg3))))
   `(org-agenda-date ((,class (:foreground ,var :height 1.1 ))))
   `(org-agenda-date-weekend ((,class (:weight normal :foreground ,fg4))))
   `(org-agenda-date-today ((,class (:weight bold :foreground ,keyword :height 1.4))))
   `(org-agenda-done ((,class (:foreground ,bg4))))
   `(org-scheduled ((,class (:foreground ,type))))
   `(org-scheduled-today ((,class (:foreground ,func :weight bold :height 1.2))))
   `(org-ellipsis ((,class (:foreground ,builtin))))
   `(org-verbatim ((,class (:foreground ,fg4))))
   `(org-document-info-keyword ((,class (:foreground ,func))))

   `(font-latex-bold-face ((,class (:foreground ,type))))
   `(font-latex-italic-face ((,class (:foreground ,key3 :italic t))))
   `(font-latex-string-face ((,class (:foreground ,str))))
   `(font-latex-match-reference-keywords ((,class (:foreground ,const))))
   `(font-latex-match-variable-keywords ((,class (:foreground ,var))))
   `(ido-only-match ((,class (:foreground ,warning))))
   `(org-sexp-date ((,class (:foreground ,fg4))))
   `(ido-first-match ((,class (:foreground ,keyword :bold t))))
   `(gnus-header-content ((,class (:foreground ,keyword))))
   `(gnus-header-from ((,class (:foreground ,var))))
   `(gnus-header-name ((,class (:foreground ,type))))
   `(gnus-header-subject ((,class (:foreground ,func :bold t))))
   `(mu4e-view-url-number-face ((,class (:foreground ,type))))
   `(mu4e-cited-1-face ((,class (:foreground ,fg2))))
   `(mu4e-cited-7-face ((,class (:foreground ,fg3))))
   `(mu4e-header-marks-face ((,class (:foreground ,type))))
   `(ffap ((,class (:foreground ,fg4))))
   `(warning ((,class (:foreground ,warning)))) 
   `(ac-completion-face ((,class (:underline t :foreground ,keyword))))
   `(info-quoted-name ((,class (:foreground ,builtin))))
   `(info-string ((,class (:foreground ,str))))
   `(icompletep-determined ((,class :foreground ,builtin)))
   `(slime-repl-inputed-output-face ((,class (:foreground ,type))))
   `(trailing-whitespace ((,class :foreground nil :background ,warning)))
   `(helm-header ((,class (:foreground ,keyword :background ,bg1 :underline nil :box nil))))
   `(helm-source-header ((,class (:foreground ,keyword :background ,bg1 :underline nil))))
   `(helm-selection ((,class (:background ,builtin :foreground ,bg1))))
   `(helm-selection-line ((,class (:background ,bg2))))
   `(helm-visible-mark ((,class (:foreground ,bg1 :background ,bg3))))
   `(helm-candidate-number ((,class (:foreground ,bg1 :background ,fg1))))
   `(helm-separator ((,class (:foreground ,keyword :background ,bg1))))
   `(helm-time-zone-current ((,class (:foreground ,builtin :background ,bg1))))
   `(helm-time-zone-home ((,class (:foreground ,keyword :background ,bg1))))
   `(helm-buffer-not-saved ((,class (:foreground ,keyword :background ,bg1))))
   `(helm-buffer-process ((,class (:foreground ,builtin :background ,bg1))))
   `(helm-buffer-saved-out ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-buffer-size ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-ff-directory ((,class (:foreground ,keyword :background ,bg1 :weight bold))))
   `(helm-ff-file ((,class (:foreground ,keyword :background ,bg1 :weight normal))))
   `(helm-ff-executable ((,class (:foreground ,key2 :background ,bg1 :weight normal))))
   `(helm-ff-invalid-symlink ((,class (:foreground ,key3 :background ,bg1 :weight bold))))
   `(helm-ff-symlink ((,class (:foreground ,keyword :background ,bg1 :weight bold))))
   `(helm-ff-prefix ((,class (:foreground ,bg1 :background ,keyword :weight normal))))
   `(helm-grep-cmd-line ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-file ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-finish ((,class (:foreground ,fg2 :background ,bg1))))
   `(helm-grep-lineno ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-match ((,class (:foreground nil :background nil :inherit helm-match))))
   `(helm-grep-running ((,class (:foreground ,func :background ,bg1))))
   `(helm-moccur-buffer ((,class (:foreground ,func :background ,bg1))))
   `(helm-source-go-package-godoc-description ((,class (:foreground ,str))))
   `(helm-bookmark-w3m ((,class (:foreground ,type))))

   `(company-echo-common ((,class (:foreground ,bg1 :background ,fg1))))
   `(company-preview ((,class (:background ,bg1 :foreground ,key2))))
   `(company-preview-common ((,class (:foreground ,bg2 :foreground ,fg1))))
   `(company-preview-search ((,class (:foreground ,builtin :background ,bg1))))
   `(company-scrollbar-bg ((,class (:background ,bg3))))
   `(company-scrollbar-fg ((,class (:foreground ,builtin))))
   `(company-tooltip ((,class (:foreground ,func :background ,bg1))))
   `(company-tooltop-annotation ((,class (:foreground ,builtin))))
   `(company-tooltip-common ((,class ( :foreground ,fg3))))
   `(company-tooltip-common-selection ((,class (:foreground ,str))))
   `(company-tooltip-mouse ((,class (:inherit highlight))))
   `(company-tooltip-selection ((,class (:background ,builtin :foreground ,fg3))))
   `(company-template-field ((,class (:inherit region))))
   ))

;;;###autoload
(when (and (boundp 'custom-theme-load-path) load-file-name)
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory
		(file-name-directory load-file-name))))

(provide-theme 'github-dark)
